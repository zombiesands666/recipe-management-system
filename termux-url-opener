#!/usr/bin/env python3
import sys
import os
from recipe_parser import extract_recipe_from_url
import psycopg2
from psycopg2.extras import RealDictCursor
import re

def get_db_connection():
    """Create a database connection using environment variables."""
    return psycopg2.connect(
        host=os.getenv('PGHOST'),
        database=os.getenv('PGDATABASE'),
        user=os.getenv('PGUSER'),
        password=os.getenv('PGPASSWORD'),
        port=os.getenv('PGPORT')
    )

def parse_ingredient(ingredient_text):
    """Parse ingredient text into quantity, unit, and name."""
    # Common cooking units
    units = r'cup|tbsp|tsp|oz|pound|lb|g|kg|ml|l|pinch|dash|piece|slice'
    
    # Try to match quantity, unit, and ingredient name
    pattern = rf'^([\d./\s]+)?\s*({units})s?\s+(.+)$'
    match = re.match(pattern, ingredient_text, re.I)
    
    if match:
        quantity_str, unit, name = match.groups()
        try:
            # Convert fraction to decimal
            if quantity_str:
                if '/' in quantity_str:
                    num, denom = quantity_str.split('/')
                    quantity = float(num) / float(denom)
                else:
                    quantity = float(quantity_str)
            else:
                quantity = 1
        except ValueError:
            quantity = 1
    else:
        quantity = 1
        unit = ''
        name = ingredient_text
    
    return {
        'name': name.strip(),
        'quantity': quantity,
        'unit': unit.lower() if unit else ''
    }

def add_recipe_to_db(recipe_data):
    """Add parsed recipe data to the database."""
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    try:
        # Start transaction
        # Insert recipe
        cur.execute("""
            INSERT INTO recipes (title, description, instructions, cooking_time, servings, category_id)
            VALUES (%s, %s, %s, %s, %s, 
                (SELECT id FROM categories WHERE name = 'Dinner' LIMIT 1))
            RETURNING id
        """, (
            recipe_data['title'],
            recipe_data['description'],
            recipe_data['instructions'],
            recipe_data['cooking_time'],
            recipe_data['servings']
        ))
        
        recipe_id = cur.fetchone()['id']
        
        # Process ingredients
        for ingredient_text in recipe_data['ingredients']:
            ingredient_data = parse_ingredient(ingredient_text)
            
            # Check if ingredient exists
            cur.execute("SELECT id FROM ingredients WHERE name = %s", (ingredient_data['name'],))
            result = cur.fetchone()
            
            if result is None:
                cur.execute("INSERT INTO ingredients (name) VALUES (%s) RETURNING id",
                          (ingredient_data['name'],))
                ingredient_id = cur.fetchone()['id']
            else:
                ingredient_id = result['id']
            
            # Add to recipe_ingredients
            cur.execute("""
                INSERT INTO recipe_ingredients (recipe_id, ingredient_id, quantity, unit)
                VALUES (%s, %s, %s, %s)
            """, (recipe_id, ingredient_id, ingredient_data['quantity'], ingredient_data['unit']))
        
        conn.commit()
        print(f"Successfully added recipe: {recipe_data['title']}")
        return True
        
    except Exception as e:
        conn.rollback()
        print(f"Error adding recipe to database: {e}")
        return False
        
    finally:
        cur.close()
        conn.close()

def main():
    if len(sys.argv) != 2:
        print("Usage: python termux-url-opener <URL>")
        sys.exit(1)
    
    url = sys.argv[1]
    print(f"Processing URL: {url}")
    
    recipe_data = extract_recipe_from_url(url)
    if recipe_data:
        if add_recipe_to_db(recipe_data):
            print("Recipe successfully imported!")
        else:
            print("Failed to import recipe.")
    else:
        print("Failed to extract recipe data from URL.")

if __name__ == "__main__":
    main()
